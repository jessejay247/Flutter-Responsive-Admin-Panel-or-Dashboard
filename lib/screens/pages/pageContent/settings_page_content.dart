import 'package:admin/components/cust_textbox.dart';
import 'package:admin/components/custom_button.dart';
import 'package:admin/helpers/constants.dart';
import 'package:admin/helpers/decimals.dart';
import 'package:admin/helpers/responsive.dart';
import 'package:admin/helpers/strings.dart';
import 'package:admin/screens/main/main_screen.dart';
import 'package:admin/screens/pages/pageContent/profile_page_content.dart';
import 'package:clipboard/clipboard.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_iconly/flutter_iconly.dart';
import 'package:otp/otp.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:base32/base32.dart';

class SettingsPageContent extends StatefulWidget {
  const SettingsPageContent({Key key}) : super(key: key);

  @override
  _SettingsPageContentState createState() => _SettingsPageContentState();
}

class _SettingsPageContentState extends State<SettingsPageContent> {
  GlobalKey<FormState> _otpKey = GlobalKey();

  //TODO get secret key from firebase;
  String _secretKey;
  bool _value = false;
  TextEditingController _otpCtrl = TextEditingController();
  String _otpCode;
  bool _loading = false;

  @override
  void initState() {
    getKey();
    super.initState();
  }

  @override
  void dispose() {
    _otpCtrl.clear();

    super.dispose();
  }

  String getKey() {
    String seckey32;
    String secretKey;
    try {
      setState(() {
        secretKey = randomString(10).toString();
        seckey32 = base32.encodeString(secretKey);
        _secretKey = seckey32;
      });

      return seckey32;
    } catch (e) {
      print(e);
    }
    return seckey32;
  }

  otpResult() {
    try {
      final code = OTP.generateTOTPCodeString(
          // _secretKey == null
          //     ? apiMethods.decryptData(getSecKey('secKey'))
          //     :
          _secretKey,
          DateTime.now().millisecondsSinceEpoch,
          isGoogle: true,
          algorithm: Algorithm.SHA1);
      //print('code is $code');
      setState(() {
        _otpCode = code;
      });
      return code;
    } catch (e) {
      print(e);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          flex: 5,
          child: Column(
            children: [
              CustContainer(
                children: [
                  // TrxnTable(),
                  Text(
                    "Two-factor authentication is a method for protection your web account. When it is activated you need to enter not only your password, but also a special code. You can receive this code by in mobile app. Even if third person will find your password, then cant access with that code.",
                  ),
                  SizedBox(height: defaultPadding),
                  Text(
                    "How to Set up",
                    style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).primaryColor),
                  ),
                  Text(
                    "• Install an authentication app on your device. Any app that supports the Time-based One-Time Password (TOTP) protocol should work.",
                    style: TextStyle(fontSize: 12),
                  ),
                  Text(
                    "• Use the authenticator app to scan the barcode below.",
                    style: TextStyle(fontSize: 12),
                  ),
                  Text(
                    "• Enter the code generated by the authenticator app.",
                    style: TextStyle(fontSize: 12),
                  ),
                  SizedBox(height: defaultPadding),
                  CustButton(
                      icon: IconlyBroken.shieldDone,
                      onPressed: pop2FA,
                      title: "Enable 2FA",
                      horizontalMult: 2)
                ],
              ),
              if (Responsive.isMobile(context))
                SizedBox(height: defaultPadding),
              if (Responsive.isMobile(context)) ThemeWid(),
            ],
          ),
        ),
        if (!Responsive.isMobile(context)) SizedBox(width: defaultPadding),
        if (!Responsive.isMobile(context))
          Expanded(
            flex: 2,
            child: ThemeWid(),
          ),
      ],
    );
  }

  pop2FA() {
    showDialog(
        context: context,
        builder: (_) => AlertDialog(
              content: Container(
                width: 300,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    QrImage(
                      data: getKey(),
                      version: QrVersions.auto,
                      size: 200.0,
                    ),
                    SizedBox(
                      height: defaultPadding,
                    ),
                    Card(
                      child: Container(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              _secretKey.toUpperCase(),
                              style: TextStyle(
                                fontSize: 20,
                              ),
                            ),
                            InkWell(
                              onTap: () {
                                FlutterClipboard.copy(_secretKey).then(
                                    (value) => ScaffoldMessenger.of(context)
                                            .showSnackBar(SnackBar(
                                          content: Text("Copied"),
                                          backgroundColor: primaryColor,
                                        )));
                                // .then((value) => //print('copied'));
                              },
                              child: Icon(IconlyBroken.paper),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(
                      height: defaultPadding,
                    ),
                    CustTextBox(
                      width: 200,
                      hintText: "Six Digit Code",
                      validator: validateOtp,
                      controller: _otpCtrl,
                      textAlign: TextAlign.center,
                      keyboardType: TextInputType.number,
                      counterText: '',
                      maxLength: 6,
                      inputFormatters: [DecimalTextInputFormatter()],
                    ),
                    SizedBox(
                      height: defaultPadding,
                    ),
                    CustButton(
                        icon: IconlyBroken.lock,
                        onPressed: () => setOtp(),
                        title: "Enable",
                        horizontalMult: 2)
                  ],
                ),
              ),
            ));
  }

  String validateOtp(String value) {
    if (value.trim().length < 6) {
      return "Invalid OTP lenght";
    } else if (value != _otpCode) {
      return "Otp don't match input";
    }
    return null;
  }

  setOtp() async {
    await otpResult();
    if (_otpKey.currentState.validate()) {
      setState(() {
        _loading = true;
      });
      _otpKey.currentState.save();
      await //TODO update secret key

          ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("OTP Set Successfully"),
        ),
      );
      _otpCtrl.clear();
      Navigator.pop(context);
      Navigator.pop(context);
      setState(() {
        _loading = false;
      });
    } else {
      //print('error');
    }
  }
}

class ThemeWid extends StatefulWidget {
  const ThemeWid({
    Key key,
  }) : super(key: key);

  @override
  _ThemeWidState createState() => _ThemeWidState();
}

class _ThemeWidState extends State<ThemeWid> {
  bool _switchValue = true;

  @override
  Widget build(BuildContext context) {
    return CustContainer(
      children: [
        Center(
            child: Text(
          "Theme",
          style: TextStyle(fontWeight: FontWeight.bold),
        )),
        SizedBox(height: defaultPadding),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text("Change Theme"),
            CupertinoSwitch(
              activeColor: Theme.of(context).primaryColor,
              value: _switchValue,
              onChanged: (value) {
                setState(() {
                  _switchValue = value;
                });
              },
            ),
          ],
        ),
        SizedBox(height: defaultPadding),
      ],
    );
  }
}
